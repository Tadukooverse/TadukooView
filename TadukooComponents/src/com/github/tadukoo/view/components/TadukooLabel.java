package com.github.tadukoo.view.components;

import com.github.tadukoo.util.logger.EasyLogger;
import com.github.tadukoo.view.components.interfaces.TLabel;
import com.github.tadukoo.view.font.FontFamily;
import com.github.tadukoo.view.font.FontResourceLoader;
import com.github.tadukoo.view.paint.SizablePaint;
import com.github.tadukoo.view.shapes.ShapeInfo;

import javax.swing.Icon;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GraphicsEnvironment;
import java.awt.Insets;
import java.io.IOException;

/**
 * Tadukoo Label is an extension of {@link JLabel} that allows for specifying more parameters that can be used in
 * Tadukoo Look &amp; Feel, such as {@link ShapeInfo}.
 *
 * @author Logan Ferree (Tadukoo)
 * @version Alpha v.0.3
 */
public class TadukooLabel extends JLabel implements TLabel{
	
	/**
	 * Builder to be used to create a {@link TadukooLabel}. It has the following parameters:
	 *
	 * <table>
	 *     <caption>TadukooLabel Parameters</caption>
	 *     <tr>
	 *         <th>Name</th>
	 *         <th>Description</th>
	 *         <th>Default or Required</th>
	 *     </tr>
	 *     <tr>
	 *         <td>text</td>
	 *         <td>The text to use on the Label</td>
	 *         <td>Defaults to null</td>
	 *     </tr>
	 *     <tr>
	 *         <td>icon</td>
	 *         <td>The icon to use on the Label</td>
	 *         <td>Defaults to null</td>
	 *     </tr>
	 *     <tr>
	 *         <td>foregroundPaint</td>
	 *         <td>The {@link SizablePaint} to use for the foreground of the Label</td>
	 *         <td>Defaults to null (to use the Look &amp; Feel's default Label foreground paint)</td>
	 *     </tr>
	 *     <tr>
	 *         <td>backgroundPaint</td>
	 *         <td>The {@link SizablePaint} to use for the background of the Label</td>
	 *         <td>Defaults to null (to use the Look &amp; Feel's default Label background paint)</td>
	 *     </tr>
	 *     <tr>
	 *         <td>disabledForegroundPaint</td>
	 *         <td>The {@link SizablePaint} to use for the disabled foreground of the Label</td>
	 *         <td>Defaults to null (to use the Look &amp; Feel's default Label disabledForeground paint)</td>
	 *     </tr>
	 *     <tr>
	 *         <td>font</td>
	 *         <td>The {@link Font} to use on the Label (specified via {@link FontFamily}, font style,
	 *         and font size</td>
	 *         <td>Defaults to null (to use the Look &amp; Feel's default Label font)</td>
	 *     </tr>
	 *     <tr>
	 *         <td>shapeInfo</td>
	 *         <td>The {@link ShapeInfo} to use on the Label</td>
	 *         <td>Defaults to null (to use the Look &amp; Feel's default Label shapeInfo)</td>
	 *     </tr>
	 *     <tr>
	 *         <td>border</td>
	 *         <td>The {@link Border} to use on the Label</td>
	 *         <td>Defaults to null (to use the Look &amp; Feel's default Label border)</td>
	 *     </tr>
	 * </table>
	 *
	 * There are also parameters for loading the font using a {@link FontResourceLoader}, which can be ignored if
	 * you don't specify a {@link Font} for this label:
	 *
	 * <table>
	 *     <caption>Font Resource Loader Parameters</caption>
	 *     <tr>
	 *         <th>Field</th>
	 *         <th>Description</th>
	 *         <th>Default Value</th>
	 *     </tr>
	 *     <tr>
	 *         <td>logFontResourceLoaderWarnings</td>
	 *         <td>Whether to log warnings generated by the FontResourceLoader
	 *         - can be ignored if you specify your own FontResourceLoader</td>
	 *         <td>false</td>
	 *     </tr>
	 *     <tr>
	 *         <td>logger</td>
	 *         <td>An {@link EasyLogger} that will be sent to the FontResourceLoader by default
	 *         - can be ignored if you specify your own FontResourceLoader</td>
	 *         <td>null (since logging warnings is set to false by default)</td>
	 *     </tr>
	 *     <tr>
	 *         <td>graphEnv</td>
	 *         <td>The {@link GraphicsEnvironment} to load a font to in the FontResourceLoader
	 *         - can be ignored if you specify your own FontResourceLoader</td>
	 *         <td>{@link GraphicsEnvironment#getLocalGraphicsEnvironment()}</td>
	 *     </tr>
	 *     <tr>
	 *         <td>fontFolder</td>
	 *         <td>The path to the fonts folder to find font files in if needed in the FontResourceLoader
	 *         - can be ignored if you specify your own FontResourceLoader</td>
	 *         <td>"fonts/"</td>
	 *     </tr>
	 *     <tr>
	 *         <td>fontResourceLoader</td>
	 *         <td>The {@link FontResourceLoader} to use in loading a font and/or ensuring they're in the system</td>
	 *         <td>a new FontResourceLoader with the specified values for {@link #logFontResourceLoaderWarnings},
	 *         {@link #logger}, {@link #graphEnv}, and {@link #fontFolder}</td>
	 *     </tr>
	 * </table>
	 *
	 * @author Logan Ferree (Tadukoo)
	 * @version Alpha v.0.3
	 */
	public static class TadukooLabelBuilder{
		/*
		 * The Basics
		 */
		/** The text to use on the Label */
		private String text = null;
		/** The icon to use on the Label */
		private Icon icon = null;
		
		/*
		 * The Paints
		 */
		/** The {@link SizablePaint} to use for the foreground of the Label */
		private SizablePaint foregroundPaint = null;
		/** The {@link SizablePaint} to use for the background of the Label */
		private SizablePaint backgroundPaint = null;
		/** The {@link SizablePaint} to use for the disabled foreground of the Label */
		private SizablePaint disabledForegroundPaint = null;
		
		/*
		 * Other Customizations
		 */
		/** The {@link FontFamily} to use on the font of the Label */
		private FontFamily fontFamily = null;
		/** The font style to use on the font of the Label */
		private int fontStyle = -1;
		/** The font size to use on the font of the Label */
		private int fontSize = -1;
		/** The {@link ShapeInfo} to use on the Label */
		private ShapeInfo shapeInfo = null;
		/** The {@link Border} to use on the Label */
		private Border border = null;
		
		/*
		 * Font Resource Loading
		 */
		/** Whether to log warnings generated by the FontResourceLoader
		 *  - can be ignored if you specify your own FontResourceLoader */
		private boolean logFontResourceLoaderWarnings = false;
		/** An {@link EasyLogger} that will be sent to the FontResourceLoader by default
		 *  - can be ignored if you specify your own FontResourceLoader */
		private EasyLogger logger = null;
		/** The {@link GraphicsEnvironment} to load a font to in the FontResourceLoader
		 *  - can be ignored if you specify your own FontResourceLoader */
		private GraphicsEnvironment graphEnv = GraphicsEnvironment.getLocalGraphicsEnvironment();
		/** The path to the fonts folder to find font files in if needed in the FontResourceLoader
		 *  - can be ignored if you specify your own FontResourceLoader */
		private String fontFolder = "fonts/";
		/** The {@link FontResourceLoader} to use in loading a font and/or ensuring they're in the system */
		private FontResourceLoader fontResourceLoader = null;
		
		// Can't create Tadukoo Label Builder outside of Tadukoo Label
		private TadukooLabelBuilder(){ }
		
		/*
		 * The Basics
		 */
		
		/**
		 * @param text The text to use on the Label
		 * @return this, to continue building
		 */
		public TadukooLabelBuilder text(String text){
			this.text = text;
			return this;
		}
		
		/**
		 * @param icon The icon to use on the Label
		 * @return this, to continue building
		 */
		public TadukooLabelBuilder icon(Icon icon){
			this.icon = icon;
			return this;
		}
		
		/*
		 * The Paints
		 */
		
		/**
		 * @param foregroundPaint The {@link SizablePaint} to use for the foreground of the Label
		 * @return this, to continue building
		 */
		public TadukooLabelBuilder foregroundPaint(SizablePaint foregroundPaint){
			this.foregroundPaint = foregroundPaint;
			return this;
		}
		
		/**
		 * @param backgroundPaint The {@link SizablePaint} to use for the background of the Label
		 * @return this, to continue building
		 */
		public TadukooLabelBuilder backgroundPaint(SizablePaint backgroundPaint){
			this.backgroundPaint = backgroundPaint;
			return this;
		}
		
		/**
		 * @param disabledForegroundPaint The {@link SizablePaint} to use for the disabled foreground of the Label
		 * @return this, to continue building
		 */
		public TadukooLabelBuilder disabledForegroundPaint(SizablePaint disabledForegroundPaint){
			this.disabledForegroundPaint = disabledForegroundPaint;
			return this;
		}
		
		/*
		 * Other Customizations
		 */
		
		/**
		 * Specifies the font to use on the Label
		 *
		 * @param fontFamily The {@link FontFamily} to use
		 * @param fontStyle The font style to use
		 * @param fontSize The font size to use
		 * @return this, to continue building
		 */
		public TadukooLabelBuilder font(FontFamily fontFamily, int fontStyle, int fontSize){
			this.fontFamily = fontFamily;
			this.fontStyle = fontStyle;
			this.fontSize = fontSize;
			return this;
		}
		
		/**
		 * @param shapeInfo The {@link ShapeInfo} to use on the Label
		 * @return this, to continue building
		 */
		public TadukooLabelBuilder shapeInfo(ShapeInfo shapeInfo){
			this.shapeInfo = shapeInfo;
			return this;
		}
		
		/**
		 * @param border The {@link Border} to use on the Label
		 * @return this, to continue building
		 */
		public TadukooLabelBuilder border(Border border){
			this.border = border;
			return this;
		}
		
		/*
		 * Font Resource Loading Methods
		 */
		
		/**
		 * @param logFontResourceLoaderWarnings Whether to log warnings generated by the FontResourceLoader
		 *  - can be ignored if you specify your own FontResourceLoader
		 * @return this, to continue building
		 */
		public TadukooLabelBuilder logFontResourceLoaderWarnings(boolean logFontResourceLoaderWarnings){
			this.logFontResourceLoaderWarnings = logFontResourceLoaderWarnings;
			return this;
		}
		
		/**
		 * @param logger An {@link EasyLogger} that will be sent to the FontResourceLoader by default
		 *  - can be ignored if you specify your own FontResourceLoader
		 * @return this, to continue building
		 */
		public TadukooLabelBuilder logger(EasyLogger logger){
			this.logger = logger;
			return this;
		}
		
		/**
		 * @param graphEnv The {@link GraphicsEnvironment} to load a font to in the FontResourceLoader
		 *  - can be ignored if you specify your own FontResourceLoader
		 * @return this, to continue building
		 */
		public TadukooLabelBuilder graphEnv(GraphicsEnvironment graphEnv){
			this.graphEnv = graphEnv;
			return this;
		}
		
		/**
		 * @param fontFolder The path to the fonts folder to find font files in if needed in the FontResourceLoader
		 *  - can be ignored if you specify your own FontResourceLoader
		 * @return this, to continue building
		 */
		public TadukooLabelBuilder fontFolder(String fontFolder){
			this.fontFolder = fontFolder;
			return this;
		}
		
		/**
		 * @param fontResourceLoader The {@link FontResourceLoader} to use in loading a font and/or ensuring
		 *  they're in the system
		 * @return this, to continue building
		 */
		public TadukooLabelBuilder fontResourceLoader(FontResourceLoader fontResourceLoader){
			this.fontResourceLoader = fontResourceLoader;
			return this;
		}
		
		/**
		 * Builds a {@link TadukooLabel}
		 *
		 * @return A newly created {@link TadukooLabel}
		 * @throws IOException If something goes wrong during {@link FontResourceLoader font resource loading}
		 * @throws FontFormatException If something goes wrong during {@link FontResourceLoader font resource loading}
		 */
		public TadukooLabel build() throws IOException, FontFormatException{
			// Determine the font to use if it was specified
			Font font = null;
			if(fontFamily != null){
				// Handle font resource loading
				if(fontResourceLoader == null){
					fontResourceLoader = new FontResourceLoader(logFontResourceLoaderWarnings, logger, graphEnv,
							fontFolder);
				}
				
				// Load font + create it
				String foundFont = fontResourceLoader.loadFont(fontFamily, true);
				font = new Font(foundFont, fontStyle, fontSize);
			}
			
			return new TadukooLabel(text, icon,
					foregroundPaint, backgroundPaint, disabledForegroundPaint,
					font, shapeInfo, border);
		}
	}
	
	/** The {@link SizablePaint} to use for the foreground of the Label */
	private SizablePaint foregroundPaint;
	/** The {@link SizablePaint} to use for the background of the Label */
	private SizablePaint backgroundPaint;
	/** The {@link SizablePaint} to use for the disabled foreground of the Label */
	private SizablePaint disabledForegroundPaint;
	/** The {@link ShapeInfo} to use on the Label */
	private ShapeInfo shapeInfo;
	
	/**
	 * Constructs a new Tadukoo Label with the given parameters
	 *
	 * @param text The text to use on the Label
	 * @param icon The icon to use on the Label
	 * @param foregroundPaint The {@link SizablePaint} to use for the foreground of the Label
	 * @param backgroundPaint The {@link SizablePaint} to use for the background of the Label
	 * @param disabledForegroundPaint The {@link SizablePaint} to use for the disabled foreground of the Label
	 * @param font The {@link Font} to use on the Label
	 * @param shapeInfo The {@link ShapeInfo} to use for the Label
	 * @param border The {@link Border} to use on the Label
	 */
	private TadukooLabel(String text, Icon icon,
	                     SizablePaint foregroundPaint, SizablePaint backgroundPaint,
	                     SizablePaint disabledForegroundPaint,
	                     Font font, ShapeInfo shapeInfo, Border border){
		super(text, icon, SwingConstants.CENTER);
		
		// Set paints
		if(foregroundPaint != null){
			setForegroundPaint(foregroundPaint);
		}
		if(backgroundPaint != null){
			setBackgroundPaint(backgroundPaint);
		}
		if(disabledForegroundPaint != null){
			setDisabledForegroundPaint(disabledForegroundPaint);
		}
		
		// Set other customizations
		if(font != null){
			setFont(font);
		}
		if(shapeInfo != null){
			setShapeInfo(shapeInfo);
		}
		if(border != null){
			setBorder(border);
		}
	}
	
	/**
	 * @return A new {@link TadukooLabelBuilder} to use to make a {@link TadukooLabel}
	 */
	public static TadukooLabelBuilder builder(){
		return new TadukooLabelBuilder();
	}
	
	/** {@inheritDoc} */
	@Override
	public SizablePaint getForegroundPaint(){
		return foregroundPaint;
	}
	
	/** {@inheritDoc} */
	@Override
	public void setForegroundPaint(SizablePaint foregroundPaint){
		this.foregroundPaint = foregroundPaint;
	}
	
	/** {@inheritDoc} */
	@Override
	public SizablePaint getBackgroundPaint(){
		return backgroundPaint;
	}
	
	/** {@inheritDoc} */
	@Override
	public void setBackgroundPaint(SizablePaint backgroundPaint){
		this.backgroundPaint = backgroundPaint;
	}
	
	/** {@inheritDoc} */
	@Override
	public SizablePaint getDisabledForegroundPaint(){
		return disabledForegroundPaint;
	}
	
	/** {@inheritDoc} */
	@Override
	public void setDisabledForegroundPaint(SizablePaint disabledForegroundPaint){
		this.disabledForegroundPaint = disabledForegroundPaint;
	}
	
	/** {@inheritDoc} */
	@Override
	public ShapeInfo getShapeInfo(){
		return shapeInfo;
	}
	
	/** {@inheritDoc} */
	@Override
	public void setShapeInfo(ShapeInfo shapeInfo){
		this.shapeInfo = shapeInfo;
	}
	
	/** {@inheritDoc} */
	@Override
	public Insets getInsets(){
		return getProperInsets(this);
	}
	
	/** {@inheritDoc} */
	@Override
	public Insets getInsets(Insets insets){
		return getProperInsets(this, insets);
	}
}
